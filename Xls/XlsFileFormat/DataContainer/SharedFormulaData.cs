using System;
using System.Collections.Generic;
using b2xtranslator.Spreadsheet.XlsFileFormat.Ptg;

namespace b2xtranslator.Spreadsheet.XlsFileFormat.DataContainer
{
    public class SharedFormulaData
    {
        /// <summary>
        /// String which stores the index to the sharedstringtable 
        /// </summary>
        private string valueString;

        /// <summary>
        /// Rownumber 
        /// </summary>
        public ushort rwFirst;

        /// <summary>
        /// Rownumber 
        /// </summary>
        public ushort rwLast;

        /// <summary>
        /// Colnumber 
        /// </summary>
        public ushort colFirst;

        /// <summary>
        /// Colnumber 
        /// </summary>
        public ushort colLast;

        /// <summary>
        /// Counts the references to this sharedformula
        /// </summary>
        public ushort RefCount;

        /// <summary>
        /// The autogenerated ID for this SharedFormula
        /// </summary>
        public int ID; 


        private Stack<AbstractPtg> ptgStack;
        public Stack<AbstractPtg> PtgStack
        {
            get { return this.ptgStack; }
        }

        /// <summary>
        /// This method is used to get the Value from this cell 
        /// </summary>
        /// <returns></returns>
        public string getValue()
        {
            return this.valueString;
        }

        /// <summary>
        /// This method is used to set the value of the cell
        /// </summary>
        /// <param name="obj"></param>
        public void setValue(object obj)
        {
            if (obj is Stack<AbstractPtg>)
            {
                this.ptgStack = (Stack<AbstractPtg>)obj;
            }
        }

        /// <summary>
        /// Checks if the formula cell with this coordinates is in the shared formula range 
        /// </summary>
        /// <param name="rw"></param>
        /// <param name="col"></param>
        public Boolean checkFormulaIsInShared(int rw, int col)
        {
            if ((rw <= this.rwLast) && (rw >= this.rwFirst) &&
                (col <= this.colLast) && (col >= this.colFirst))
                return true;
            else return false; 
        }

        /// <summary>
        /// Converts the classattributes to a string which can be used in the new open xml standard 
        /// This would be: 
        ///     mergeCell ref="B3:C3" 
        ///     ref is  the from the first cell to the last cell 
        /// </summary>
        /// <returns></returns>
        public string getOXMLFormatedData()
        {
            string returnvalue = "";
            returnvalue += ExcelHelperClass.intToABCString(this.colFirst, (this.rwFirst + 1).ToString());
            returnvalue += ":";
            returnvalue += ExcelHelperClass.intToABCString(this.colLast, (this.rwLast + 1).ToString());
            return returnvalue;
        }
    }
}
